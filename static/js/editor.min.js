const editor=document.querySelector(".view");let linesinput=[],cursor=0;class Word{constructor(word,id=1){console.log(word),this.word=word,this.id=id,this.font=document.createElement("font")}html(){return"import"==this.word&&(this.font.color="red"),this.font.innerText=this.word,this.font}}class Input{constructor(){this.nextLine=null,this.previousLine=null,this.wdiv=document.createElement("div"),this.label=document.createElement("div"),this.label.className="number",this.lineNumber=0,this.input=document.createElement("p"),this.input.className="input",this.input.spellcheck=!1,this.input.contentEditable=!0,this.content_length=0,this.input.addEventListener("keydown",e=>{cursor=cursor_position(),this.content_length=this.input.innerText.length}),this.input.addEventListener("focus",()=>{for(let i of linesinput)i.setAttribute("focus",!1);this.focus(),this.setAttribute("focus",!0)}),this.wdiv.append(this.label,this.input)}line=a=>{this.lineNumber=a,this.label.innerText=a};setAttribute=(name,value)=>{this.input.setAttribute(name,value)};getAttribute=name=>this.input.getAttribute(name);getHTML=()=>this.wdiv;focus=()=>{this.input.focus()};format_code=()=>{this.input.innerHTML=null;for(let i=0;i<this.nodes.length;i++){let node=this.nodes[i];console.log(this.words[i],node),node.word=this.words[i],this.input.append(node.html())}}}let inp=new Input;linesinput.push(inp),inp.line(1),inp.setAttribute("line",1),inp.setAttribute("focus",!0),editor.appendChild(inp.getHTML()),inp.focus();const loading=document.querySelector(".loading");function newInputField(){let allInput=editor.querySelectorAll(".input");curr=editor.querySelector("[focus=true]"),allInput.forEach(i=>{i.setAttribute("focus",!1)});let number=allInput.length,p=new Input;if(line=1,curr&&(line=curr.getAttribute("line")),line<=number){if(curr.innerText.length>cursor){let code=curr.innerText,oldline=code.slice(0,cursor),newline=code.slice(cursor);p.input.innerText=newline,curr.innerText=oldline}linesinput=appendInput(p,line,linesinput)}else linesinput.push(p);p.line(number+1),p.setAttribute("line",number+1);let n=1;for(const a of linesinput)a.line(n),a.setAttribute("line",n),a.setAttribute("focus",!1),editor.appendChild(a.getHTML()),n++;p.setAttribute("focus",!0),p.focus()}function goUp(){curr=editor.querySelector("[focus=true]"),line=curr.getAttribute("line"),toLine=editor.querySelector(`[line="${Number(line)-1}"]`),toLine&&(toLine.setAttribute("focus",!0),curr.setAttribute("focus",!1),toLine.focus())}function goDown(){curr=editor.querySelector("[focus=true]"),line=curr.getAttribute("line"),toLine=editor.querySelector(`[line="${Number(line)+1}"]`),toLine&&(toLine.setAttribute("focus",!0),curr.setAttribute("focus",!1),toLine.focus())}function appendInput(input,index,arr){let n=[];return f=arr.slice(0,index),p=arr.slice(index),f[index]=input,arr=[...f,...p]}editor.addEventListener("keydown",e=>{switch(cursor=cursor_position(),e.keyCode){case 13:e.preventDefault(),newInputField();break;case 38:goUp();break;case 40:goDown()}});const runbtn=document.querySelector("[run]"),clearbtn=document.querySelector("[clear]"),copybtn=document.querySelector("[copy]"),preview=document.querySelector(".pview");function addtopreview(data){let p=document.createElement("p");p.innerText=data,preview.appendChild(p)}function clearEditor(){editor.innerHTML="",preview.innerHTML="",linesinput=[];let inp=new Input;linesinput.push(inp),inp.line(1),inp.setAttribute("line",1),inp.setAttribute("focus",!0),editor.appendChild(inp.getHTML()),inp.focus()}function copycode(){let allInput=editor.querySelectorAll(".input"),code="";for(const inp of allInput){let v;code+="\n"+inp.innerText}window.navigator.clipboard.writeText(code),copybtn.innerText="copied",setTimeout(()=>copybtn.innerText="copy",500)}function cursor_position(){var sel=document.getSelection();sel.modify("extend","backward","paragraphboundary");var pos=sel.toString().length;return null!=sel.anchorNode&&sel.collapseToEnd(),pos}runbtn.onclick=async()=>{let allInput=editor.querySelectorAll(".input"),code=[];allInput.forEach(element=>{code.push(element.innerText)});let formdata=new FormData;formdata.append("code",code.join("_")),runbtn.innerText="running ...";const response=await fetch("/api_v1/code",{method:"POST",body:formdata}),data=await response.json();for(const d of data)addtopreview(d);addtopreview("[Program finished]"),runbtn.innerText="run"},clearbtn.onclick=()=>clearEditor(),copybtn.onclick=()=>copycode();